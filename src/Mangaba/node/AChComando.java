/* This file was generated by SableCC (http://www.sablecc.org/). */

package Mangaba.node;

import Mangaba.analysis.*;

@SuppressWarnings("nls")
public final class AChComando extends PComando
{
    private PChamada _chamada_;
    private PListaPontoVirgula _listaPontoVirgula_;

    public AChComando()
    {
        // Constructor
    }

    public AChComando(
        @SuppressWarnings("hiding") PChamada _chamada_,
        @SuppressWarnings("hiding") PListaPontoVirgula _listaPontoVirgula_)
    {
        // Constructor
        setChamada(_chamada_);

        setListaPontoVirgula(_listaPontoVirgula_);

    }

    @Override
    public Object clone()
    {
        return new AChComando(
            cloneNode(this._chamada_),
            cloneNode(this._listaPontoVirgula_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAChComando(this);
    }

    public PChamada getChamada()
    {
        return this._chamada_;
    }

    public void setChamada(PChamada node)
    {
        if(this._chamada_ != null)
        {
            this._chamada_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._chamada_ = node;
    }

    public PListaPontoVirgula getListaPontoVirgula()
    {
        return this._listaPontoVirgula_;
    }

    public void setListaPontoVirgula(PListaPontoVirgula node)
    {
        if(this._listaPontoVirgula_ != null)
        {
            this._listaPontoVirgula_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listaPontoVirgula_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._chamada_)
            + toString(this._listaPontoVirgula_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._chamada_ == child)
        {
            this._chamada_ = null;
            return;
        }

        if(this._listaPontoVirgula_ == child)
        {
            this._listaPontoVirgula_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._chamada_ == oldChild)
        {
            setChamada((PChamada) newChild);
            return;
        }

        if(this._listaPontoVirgula_ == oldChild)
        {
            setListaPontoVirgula((PListaPontoVirgula) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
