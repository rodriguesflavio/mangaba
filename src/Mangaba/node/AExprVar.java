/* This file was generated by SableCC (http://www.sablecc.org/). */

package Mangaba.node;

import Mangaba.analysis.*;

@SuppressWarnings("nls")
public final class AExprVar extends PVar
{
    private PVar _var_;
    private TAbrecolchetes _abrecolchetes_;
    private PExpr _expr_;
    private TFechacolchetes _fechacolchetes_;

    public AExprVar()
    {
        // Constructor
    }

    public AExprVar(
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") TAbrecolchetes _abrecolchetes_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TFechacolchetes _fechacolchetes_)
    {
        // Constructor
        setVar(_var_);

        setAbrecolchetes(_abrecolchetes_);

        setExpr(_expr_);

        setFechacolchetes(_fechacolchetes_);

    }

    @Override
    public Object clone()
    {
        return new AExprVar(
            cloneNode(this._var_),
            cloneNode(this._abrecolchetes_),
            cloneNode(this._expr_),
            cloneNode(this._fechacolchetes_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExprVar(this);
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TAbrecolchetes getAbrecolchetes()
    {
        return this._abrecolchetes_;
    }

    public void setAbrecolchetes(TAbrecolchetes node)
    {
        if(this._abrecolchetes_ != null)
        {
            this._abrecolchetes_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._abrecolchetes_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TFechacolchetes getFechacolchetes()
    {
        return this._fechacolchetes_;
    }

    public void setFechacolchetes(TFechacolchetes node)
    {
        if(this._fechacolchetes_ != null)
        {
            this._fechacolchetes_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fechacolchetes_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._abrecolchetes_)
            + toString(this._expr_)
            + toString(this._fechacolchetes_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._abrecolchetes_ == child)
        {
            this._abrecolchetes_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._fechacolchetes_ == child)
        {
            this._fechacolchetes_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._abrecolchetes_ == oldChild)
        {
            setAbrecolchetes((TAbrecolchetes) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._fechacolchetes_ == oldChild)
        {
            setFechacolchetes((TFechacolchetes) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
