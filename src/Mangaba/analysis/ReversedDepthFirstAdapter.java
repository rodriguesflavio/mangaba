/* This file was generated by SableCC (http://www.sablecc.org/). */

package Mangaba.analysis;

import java.util.*;
import Mangaba.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPDecVar().apply(this);
        outStart(node);
    }

    public void inADecVar(ADecVar node)
    {
        defaultIn(node);
    }

    public void outADecVar(ADecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVar(ADecVar node)
    {
        inADecVar(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outADecVar(node);
    }

    public void inAListaNomes(AListaNomes node)
    {
        defaultIn(node);
    }

    public void outAListaNomes(AListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaNomes(AListaNomes node)
    {
        inAListaNomes(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        outAListaNomes(node);
    }

    public void inAIdListaNomes(AIdListaNomes node)
    {
        defaultIn(node);
    }

    public void outAIdListaNomes(AIdListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdListaNomes(AIdListaNomes node)
    {
        inAIdListaNomes(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdListaNomes(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipoRetorno() != null)
        {
            node.getTipoRetorno().apply(this);
        }
        outADecFuncao(node);
    }

    public void inATipoRetorno(ATipoRetorno node)
    {
        defaultIn(node);
    }

    public void outATipoRetorno(ATipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoRetorno(ATipoRetorno node)
    {
        inATipoRetorno(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoRetorno(node);
    }

    public void inAPVaziaParametros(APVaziaParametros node)
    {
        defaultIn(node);
    }

    public void outAPVaziaParametros(APVaziaParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPVaziaParametros(APVaziaParametros node)
    {
        inAPVaziaParametros(node);
        outAPVaziaParametros(node);
    }

    public void inAParamsParametros(AParamsParametros node)
    {
        defaultIn(node);
    }

    public void outAParamsParametros(AParamsParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamsParametros(AParamsParametros node)
    {
        inAParamsParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        outAParamsParametros(node);
    }

    public void inAParamParametros(AParamParametros node)
    {
        defaultIn(node);
    }

    public void outAParamParametros(AParamParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamParametros(AParamParametros node)
    {
        inAParamParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParamParametros(node);
    }

    public void inAParamParametro(AParamParametro node)
    {
        defaultIn(node);
    }

    public void outAParamParametro(AParamParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamParametro(AParamParametro node)
    {
        inAParamParametro(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAParamParametro(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getListaComando() != null)
        {
            node.getListaComando().apply(this);
        }
        if(node.getListaDec() != null)
        {
            node.getListaDec().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outABloco(node);
    }

    public void inAListaDec(AListaDec node)
    {
        defaultIn(node);
    }

    public void outAListaDec(AListaDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaDec(AListaDec node)
    {
        inAListaDec(node);
        outAListaDec(node);
    }

    public void inAListaListaDec(AListaListaDec node)
    {
        defaultIn(node);
    }

    public void outAListaListaDec(AListaListaDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListaDec(AListaListaDec node)
    {
        inAListaListaDec(node);
        if(node.getListaDec1() != null)
        {
            node.getListaDec1().apply(this);
        }
        outAListaListaDec(node);
    }

    public void inAListaDecListaDec1(AListaDecListaDec1 node)
    {
        defaultIn(node);
    }

    public void outAListaDecListaDec1(AListaDecListaDec1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaDecListaDec1(AListaDecListaDec1 node)
    {
        inAListaDecListaDec1(node);
        if(node.getListaDec1() != null)
        {
            node.getListaDec1().apply(this);
        }
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outAListaDecListaDec1(node);
    }

    public void inADecListaDec1(ADecListaDec1 node)
    {
        defaultIn(node);
    }

    public void outADecListaDec1(ADecListaDec1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecListaDec1(ADecListaDec1 node)
    {
        inADecListaDec1(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecListaDec1(node);
    }

    public void inAListaComando(AListaComando node)
    {
        defaultIn(node);
    }

    public void outAListaComando(AListaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaComando(AListaComando node)
    {
        inAListaComando(node);
        outAListaComando(node);
    }

    public void inAListaListaComando(AListaListaComando node)
    {
        defaultIn(node);
    }

    public void outAListaListaComando(AListaListaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListaComando(AListaListaComando node)
    {
        inAListaListaComando(node);
        if(node.getListaComando1() != null)
        {
            node.getListaComando1().apply(this);
        }
        outAListaListaComando(node);
    }

    public void inAListaComListaComando1(AListaComListaComando1 node)
    {
        defaultIn(node);
    }

    public void outAListaComListaComando1(AListaComListaComando1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaComListaComando1(AListaComListaComando1 node)
    {
        inAListaComListaComando1(node);
        if(node.getListaComando1() != null)
        {
            node.getListaComando1().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAListaComListaComando1(node);
    }

    public void inAComandoListaComando1(AComandoListaComando1 node)
    {
        defaultIn(node);
    }

    public void outAComandoListaComando1(AComandoListaComando1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoListaComando1(AComandoListaComando1 node)
    {
        inAComandoListaComando1(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoListaComando1(node);
    }

    public void inAComando(AComando node)
    {
        defaultIn(node);
    }

    public void outAComando(AComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComando(AComando node)
    {
        inAComando(node);
        if(node.getComandoSe() != null)
        {
            node.getComandoSe().apply(this);
        }
        outAComando(node);
    }

    public void inAComSeComando(AComSeComando node)
    {
        defaultIn(node);
    }

    public void outAComSeComando(AComSeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComSeComando(AComSeComando node)
    {
        inAComSeComando(node);
        if(node.getComandoSenao() != null)
        {
            node.getComandoSenao().apply(this);
        }
        outAComSeComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getComandoEnquanto() != null)
        {
            node.getComandoEnquanto().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getComandoPara() != null)
        {
            node.getComandoPara().apply(this);
        }
        outAParaComando(node);
    }

    public void inAParaCadaComando(AParaCadaComando node)
    {
        defaultIn(node);
    }

    public void outAParaCadaComando(AParaCadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaCadaComando(AParaCadaComando node)
    {
        inAParaCadaComando(node);
        if(node.getComandoParaCada() != null)
        {
            node.getComandoParaCada().apply(this);
        }
        outAParaCadaComando(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getListaPontoVirgula() != null)
        {
            node.getListaPontoVirgula().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inARetornoComando(ARetornoComando node)
    {
        defaultIn(node);
    }

    public void outARetornoComando(ARetornoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetornoComando(ARetornoComando node)
    {
        inARetornoComando(node);
        if(node.getRetorno() != null)
        {
            node.getRetorno().apply(this);
        }
        outARetornoComando(node);
    }

    public void inAChComando(AChComando node)
    {
        defaultIn(node);
    }

    public void outAChComando(AChComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChComando(AChComando node)
    {
        inAChComando(node);
        if(node.getListaPontoVirgula() != null)
        {
            node.getListaPontoVirgula().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChComando(node);
    }

    public void inAComandoSe(AComandoSe node)
    {
        defaultIn(node);
    }

    public void outAComandoSe(AComandoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSe(AComandoSe node)
    {
        inAComandoSe(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAComandoSe(node);
    }

    public void inAComandoSenao(AComandoSenao node)
    {
        defaultIn(node);
    }

    public void outAComandoSenao(AComandoSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSenao(AComandoSenao node)
    {
        inAComandoSenao(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getComandoSe() != null)
        {
            node.getComandoSe().apply(this);
        }
        outAComandoSenao(node);
    }

    public void inAComandoEnquanto(AComandoEnquanto node)
    {
        defaultIn(node);
    }

    public void outAComandoEnquanto(AComandoEnquanto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEnquanto(AComandoEnquanto node)
    {
        inAComandoEnquanto(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAComandoEnquanto(node);
    }

    public void inAComandoPara(AComandoPara node)
    {
        defaultIn(node);
    }

    public void outAComandoPara(AComandoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoPara(AComandoPara node)
    {
        inAComandoPara(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getAuxPara() != null)
        {
            node.getAuxPara().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAComandoPara(node);
    }

    public void inAComandoParaCada(AComandoParaCada node)
    {
        defaultIn(node);
    }

    public void outAComandoParaCada(AComandoParaCada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoParaCada(AComandoParaCada node)
    {
        inAComandoParaCada(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getAuxParaCada() != null)
        {
            node.getAuxParaCada().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getParacada() != null)
        {
            node.getParacada().apply(this);
        }
        outAComandoParaCada(node);
    }

    public void inAAuxPara(AAuxPara node)
    {
        defaultIn(node);
    }

    public void outAAuxPara(AAuxPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAuxPara(AAuxPara node)
    {
        inAAuxPara(node);
        if(node.getListaPontoVirgula() != null)
        {
            node.getListaPontoVirgula().apply(this);
        }
        if(node.getListaAtrib() != null)
        {
            node.getListaAtrib().apply(this);
        }
        outAAuxPara(node);
    }

    public void inAP1ListaPontoVirgula(AP1ListaPontoVirgula node)
    {
        defaultIn(node);
    }

    public void outAP1ListaPontoVirgula(AP1ListaPontoVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP1ListaPontoVirgula(AP1ListaPontoVirgula node)
    {
        inAP1ListaPontoVirgula(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAP1ListaPontoVirgula(node);
    }

    public void inAP2ListaPontoVirgula(AP2ListaPontoVirgula node)
    {
        defaultIn(node);
    }

    public void outAP2ListaPontoVirgula(AP2ListaPontoVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP2ListaPontoVirgula(AP2ListaPontoVirgula node)
    {
        inAP2ListaPontoVirgula(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        outAP2ListaPontoVirgula(node);
    }

    public void inAAuxParaCada(AAuxParaCada node)
    {
        defaultIn(node);
    }

    public void outAAuxParaCada(AAuxParaCada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAuxParaCada(AAuxParaCada node)
    {
        inAAuxParaCada(node);
        if(node.getListaId() != null)
        {
            node.getListaId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAAuxParaCada(node);
    }

    public void inAI1ListaId(AI1ListaId node)
    {
        defaultIn(node);
    }

    public void outAI1ListaId(AI1ListaId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAI1ListaId(AI1ListaId node)
    {
        inAI1ListaId(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAI1ListaId(node);
    }

    public void inAI2ListaId(AI2ListaId node)
    {
        defaultIn(node);
    }

    public void outAI2ListaId(AI2ListaId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAI2ListaId(AI2ListaId node)
    {
        inAI2ListaId(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        outAI2ListaId(node);
    }

    public void inAAtrib(AAtrib node)
    {
        defaultIn(node);
    }

    public void outAAtrib(AAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtrib(AAtrib node)
    {
        inAAtrib(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtrib(node);
    }

    public void inAVariavelTipadaAtrib(AVariavelTipadaAtrib node)
    {
        defaultIn(node);
    }

    public void outAVariavelTipadaAtrib(AVariavelTipadaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelTipadaAtrib(AVariavelTipadaAtrib node)
    {
        inAVariavelTipadaAtrib(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariavelTipadaAtrib(node);
    }

    public void inAListaAtrib(AListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAListaAtrib(AListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaAtrib(AListaAtrib node)
    {
        inAListaAtrib(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getListaAtrib() != null)
        {
            node.getListaAtrib().apply(this);
        }
        outAListaAtrib(node);
    }

    public void inAAtribListaAtrib(AAtribListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAAtribListaAtrib(AAtribListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribListaAtrib(AAtribListaAtrib node)
    {
        inAAtribListaAtrib(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        outAAtribListaAtrib(node);
    }

    public void inARetorno(ARetorno node)
    {
        defaultIn(node);
    }

    public void outARetorno(ARetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetorno(ARetorno node)
    {
        inARetorno(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getRetorne() != null)
        {
            node.getRetorne().apply(this);
        }
        outARetorno(node);
    }

    public void inAVar(AVar node)
    {
        defaultIn(node);
    }

    public void outAVar(AVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVar(AVar node)
    {
        inAVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVar(node);
    }

    public void inAExprVar(AExprVar node)
    {
        defaultIn(node);
    }

    public void outAExprVar(AExprVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprVar(AExprVar node)
    {
        inAExprVar(node);
        if(node.getFechacolchetes() != null)
        {
            node.getFechacolchetes().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAbrecolchetes() != null)
        {
            node.getAbrecolchetes().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAExprVar(node);
    }

    public void inAIntTipoBase(AIntTipoBase node)
    {
        defaultIn(node);
    }

    public void outAIntTipoBase(AIntTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipoBase(AIntTipoBase node)
    {
        inAIntTipoBase(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAIntTipoBase(node);
    }

    public void inACaracterTipoBase(ACaracterTipoBase node)
    {
        defaultIn(node);
    }

    public void outACaracterTipoBase(ACaracterTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaracterTipoBase(ACaracterTipoBase node)
    {
        inACaracterTipoBase(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaracterTipoBase(node);
    }

    public void inABoolTipoBase(ABoolTipoBase node)
    {
        defaultIn(node);
    }

    public void outABoolTipoBase(ABoolTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoBase(ABoolTipoBase node)
    {
        inABoolTipoBase(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABoolTipoBase(node);
    }

    public void inARTipoBase(ARTipoBase node)
    {
        defaultIn(node);
    }

    public void outARTipoBase(ARTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARTipoBase(ARTipoBase node)
    {
        inARTipoBase(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARTipoBase(node);
    }

    public void inATipoEsp(ATipoEsp node)
    {
        defaultIn(node);
    }

    public void outATipoEsp(ATipoEsp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoEsp(ATipoEsp node)
    {
        inATipoEsp(node);
        if(node.getInteiroLiteral() != null)
        {
            node.getInteiroLiteral().apply(this);
        }
        outATipoEsp(node);
    }

    public void inARealTipoEsp(ARealTipoEsp node)
    {
        defaultIn(node);
    }

    public void outARealTipoEsp(ARealTipoEsp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoEsp(ARealTipoEsp node)
    {
        inARealTipoEsp(node);
        if(node.getRealLiteral() != null)
        {
            node.getRealLiteral().apply(this);
        }
        outARealTipoEsp(node);
    }

    public void inACaractTipoEsp(ACaractTipoEsp node)
    {
        defaultIn(node);
    }

    public void outACaractTipoEsp(ACaractTipoEsp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractTipoEsp(ACaractTipoEsp node)
    {
        inACaractTipoEsp(node);
        if(node.getCaractereLiteral() != null)
        {
            node.getCaractereLiteral().apply(this);
        }
        outACaractTipoEsp(node);
    }

    public void inABoolTipoEsp(ABoolTipoEsp node)
    {
        defaultIn(node);
    }

    public void outABoolTipoEsp(ABoolTipoEsp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoEsp(ABoolTipoEsp node)
    {
        inABoolTipoEsp(node);
        if(node.getBoolLiteral() != null)
        {
            node.getBoolLiteral().apply(this);
        }
        outABoolTipoEsp(node);
    }

    public void inATipo(ATipo node)
    {
        defaultIn(node);
    }

    public void outATipo(ATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipo(ATipo node)
    {
        inATipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipo(node);
    }

    public void inAVetorTipo(AVetorTipo node)
    {
        defaultIn(node);
    }

    public void outAVetorTipo(AVetorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorTipo(AVetorTipo node)
    {
        inAVetorTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getVetor() != null)
        {
            node.getVetor().apply(this);
        }
        outAVetorTipo(node);
    }

    public void inAExpr(AExpr node)
    {
        defaultIn(node);
    }

    public void outAExpr(AExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr(AExpr node)
    {
        inAExpr(node);
        if(node.getTipoEsp() != null)
        {
            node.getTipoEsp().apply(this);
        }
        outAExpr(node);
    }

    public void inAOprsExpr(AOprsExpr node)
    {
        defaultIn(node);
    }

    public void outAOprsExpr(AOprsExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOprsExpr(AOprsExpr node)
    {
        inAOprsExpr(node);
        if(node.getOperadores() != null)
        {
            node.getOperadores().apply(this);
        }
        outAOprsExpr(node);
    }

    public void inAChamExpr(AChamExpr node)
    {
        defaultIn(node);
    }

    public void outAChamExpr(AChamExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamExpr(AChamExpr node)
    {
        inAChamExpr(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamExpr(node);
    }

    public void inAFatorOperadores(AFatorOperadores node)
    {
        defaultIn(node);
    }

    public void outAFatorOperadores(AFatorOperadores node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorOperadores(AFatorOperadores node)
    {
        inAFatorOperadores(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorOperadores(node);
    }

    public void inAOpAdiOperadores(AOpAdiOperadores node)
    {
        defaultIn(node);
    }

    public void outAOpAdiOperadores(AOpAdiOperadores node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpAdiOperadores(AOpAdiOperadores node)
    {
        inAOpAdiOperadores(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getOpAdi() != null)
        {
            node.getOpAdi().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOpAdiOperadores(node);
    }

    public void inAOpRelOperadores(AOpRelOperadores node)
    {
        defaultIn(node);
    }

    public void outAOpRelOperadores(AOpRelOperadores node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpRelOperadores(AOpRelOperadores node)
    {
        inAOpRelOperadores(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getOpRel() != null)
        {
            node.getOpRel().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOpRelOperadores(node);
    }

    public void inAOpBoolOperadores(AOpBoolOperadores node)
    {
        defaultIn(node);
    }

    public void outAOpBoolOperadores(AOpBoolOperadores node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpBoolOperadores(AOpBoolOperadores node)
    {
        inAOpBoolOperadores(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getOpBool() != null)
        {
            node.getOpBool().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOpBoolOperadores(node);
    }

    public void inAOpRel(AOpRel node)
    {
        defaultIn(node);
    }

    public void outAOpRel(AOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpRel(AOpRel node)
    {
        inAOpRel(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAOpRel(node);
    }

    public void inAMenorQOpRel(AMenorQOpRel node)
    {
        defaultIn(node);
    }

    public void outAMenorQOpRel(AMenorQOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorQOpRel(AMenorQOpRel node)
    {
        inAMenorQOpRel(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorQOpRel(node);
    }

    public void inAMaiorQOpRel(AMaiorQOpRel node)
    {
        defaultIn(node);
    }

    public void outAMaiorQOpRel(AMaiorQOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorQOpRel(AMaiorQOpRel node)
    {
        inAMaiorQOpRel(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorQOpRel(node);
    }

    public void inAMaiorIgualOpRel(AMaiorIgualOpRel node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualOpRel(AMaiorIgualOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualOpRel(AMaiorIgualOpRel node)
    {
        inAMaiorIgualOpRel(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorIgualOpRel(node);
    }

    public void inAMenorIgualOpRel(AMenorIgualOpRel node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualOpRel(AMenorIgualOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualOpRel(AMenorIgualOpRel node)
    {
        inAMenorIgualOpRel(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorIgualOpRel(node);
    }

    public void inAOpAdi(AOpAdi node)
    {
        defaultIn(node);
    }

    public void outAOpAdi(AOpAdi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpAdi(AOpAdi node)
    {
        inAOpAdi(node);
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        outAOpAdi(node);
    }

    public void inAMenosOpAdi(AMenosOpAdi node)
    {
        defaultIn(node);
    }

    public void outAMenosOpAdi(AMenosOpAdi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosOpAdi(AMenosOpAdi node)
    {
        inAMenosOpAdi(node);
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        outAMenosOpAdi(node);
    }

    public void inAOpMul(AOpMul node)
    {
        defaultIn(node);
    }

    public void outAOpMul(AOpMul node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMul(AOpMul node)
    {
        inAOpMul(node);
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        outAOpMul(node);
    }

    public void inADivisaoOpMul(ADivisaoOpMul node)
    {
        defaultIn(node);
    }

    public void outADivisaoOpMul(ADivisaoOpMul node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoOpMul(ADivisaoOpMul node)
    {
        inADivisaoOpMul(node);
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        outADivisaoOpMul(node);
    }

    public void inAOpBool(AOpBool node)
    {
        defaultIn(node);
    }

    public void outAOpBool(AOpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpBool(AOpBool node)
    {
        inAOpBool(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAOpBool(node);
    }

    public void inAOuOpBool(AOuOpBool node)
    {
        defaultIn(node);
    }

    public void outAOuOpBool(AOuOpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuOpBool(AOuOpBool node)
    {
        inAOuOpBool(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuOpBool(node);
    }

    public void inANaoOpBool(ANaoOpBool node)
    {
        defaultIn(node);
    }

    public void outANaoOpBool(ANaoOpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoOpBool(ANaoOpBool node)
    {
        inANaoOpBool(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANaoOpBool(node);
    }

    public void inATermoFator(ATermoFator node)
    {
        defaultIn(node);
    }

    public void outATermoFator(ATermoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoFator(ATermoFator node)
    {
        inATermoFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoFator(node);
    }

    public void inAOpMulFator(AOpMulFator node)
    {
        defaultIn(node);
    }

    public void outAOpMulFator(AOpMulFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMulFator(AOpMulFator node)
    {
        inAOpMulFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getOpMul() != null)
        {
            node.getOpMul().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAOpMulFator(node);
    }

    public void inANumeroTermo(ANumeroTermo node)
    {
        defaultIn(node);
    }

    public void outANumeroTermo(ANumeroTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTermo(ANumeroTermo node)
    {
        inANumeroTermo(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroTermo(node);
    }

    public void inAVarTermo(AVarTermo node)
    {
        defaultIn(node);
    }

    public void outAVarTermo(AVarTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTermo(AVarTermo node)
    {
        inAVarTermo(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarTermo(node);
    }

    public void inAExprTermo(AExprTermo node)
    {
        defaultIn(node);
    }

    public void outAExprTermo(AExprTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTermo(AExprTermo node)
    {
        inAExprTermo(node);
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        outAExprTermo(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAChamada(node);
    }

    public void inAListaExp(AListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExp(AListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExp(AListaExp node)
    {
        inAListaExp(node);
        outAListaExp(node);
    }

    public void inAListaListaExp(AListaListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaListaExp(AListaListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaListaExp(AListaListaExp node)
    {
        inAListaListaExp(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        outAListaListaExp(node);
    }

    public void inAExpListaExp(AExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAExpListaExp(AExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpListaExp(AExpListaExp node)
    {
        inAExpListaExp(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExpListaExp(node);
    }
}
